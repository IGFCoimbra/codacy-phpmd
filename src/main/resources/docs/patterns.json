{ "name" : "phpmd",
  "patterns" : [
    {
      "patternId":"rulesets-cleancode.xml-BooleanArgumentFlag",
      "category":"CodeStyle",
      "title":"Avoid boolean flag",
      "description":"",
      "level":"Info"
    },
    {
      "patternId":"rulesets-cleancode.xml-ElseExpression",
      "category":"CodeStyle",
      "title":"Avoid else expressions",
      "description":"Use return statements instead of else expression",
      "level":"Info"
    },
    {
      "patternId":"rulesets-cleancode.xml-StaticAccess",
      "category":"CodeStyle",
      "title":"Avoid static access",
      "description":"Static access leads to hard to test code",
      "level":"Info"
    },
    {
      "patternId":"rulesets-codesize.xml-CyclomaticComplexity",
      "category":"Complexity",
      "title":"Cyclomatic complexity",
      "description":"This pattern reports methods with high cyclomatic complexity",
      "parameters":[
        {
          "name":"reportLevel",
          "default":10
        },
        {
          "name":"showClassesComplexity",
          "default":true
        },
        {
          "name":"showMethodsComplexity",
          "default":true
        }
      ],
      "level":"Warning"
    },
    {
      "patternId":"rulesets-codesize.xml-NPathComplexity",
      "category":"Complexity",
      "title":"NPath complexity",
      "description":"This pattern reports methods with a large number of possible paths",
      "parameters":[
        {
          "name":"minimum",
          "default":200
        }
      ],
      "level":"Warning"
    },
    {
      "patternId":"rulesets-codesize.xml-ExcessiveMethodLength",
      "category":"Complexity",
      "title":"Excessive method length",
      "description":"This pattern reports excessively long methods.",
      "parameters":[
        {
          "name":"minimum",
          "default":100
        }
      ],
      "level":"Warning"
    },
    {
      "patternId":"rulesets-codesize.xml-ExcessiveClassLength",
      "category":"Complexity",
      "title":"Excessive class length",
      "description":"This pattern reports excessively long classes.",
      "parameters":[
        {
          "name":"minimum",
          "default":1000
        }
      ],
      "level":"Warning"
    },
    {
      "patternId":"rulesets-codesize.xml-ExcessiveParameterList",
      "category":"Complexity",
      "title":"Excessive parameters",
      "description":"This pattern reports methods with a high number of parameters.",
      "parameters":[
        {
          "name":"minimum",
          "default":10
        }
      ],
      "level":"Warning"
    },
    {
      "patternId":"rulesets-codesize.xml-ExcessivePublicCount",
      "category":"Complexity",
      "title":"Excessive public attributes",
      "description":"This pattern reports classes with a high number of public methods and attributes.",
      "parameters":[
        {
          "name":"minimum",
          "default":45
        }
      ],
      "level":"Warning"
    },
    {
      "patternId":"rulesets-codesize.xml-TooManyFields",
      "category":"Complexity",
      "title":"Excessive fields",
      "description":"This pattern reports classes with a high number of fields.",
      "parameters":[
        {
          "name":"maxfields",
          "default":15
        }
      ],
      "level":"Warning"
    },
    {
      "patternId":"rulesets-codesize.xml-TooManyMethods",
      "category":"Complexity",
      "title":"Excessive methods",
      "description":"This pattern reports classes with a high number of methods.",
      "parameters":[
        {
          "name":"maxmethods",
          "default":10
        }
      ],
      "level":"Warning"
    },
    {
      "patternId":"rulesets-codesize.xml-ExcessiveClassComplexity",
      "category":"Complexity",
      "title":"Weighted method count",
      "description":"This pattern reports classes with a high weighted method count.",
      "parameters":[
        {
          "name":"maximum",
          "default":50
        }
      ],
      "level":"Warning"
    },
    {
      "patternId":"rulesets-controversial.xml-Superglobals",
      "category":"CodeStyle",
      "title":"Encapsulate Superglobals",
      "description":"Prohibit direct access to superglobal variables",
      "level":"Info"
    },
    {
      "patternId":"rulesets-controversial.xml-CamelCaseClassName",
      "category":"CodeStyle",
      "title":"Enforce CamelCase in classes",
      "description":"Requires all class names to use the CamelCase style",
      "level":"Info"
    },
    {
      "patternId":"rulesets-controversial.xml-CamelCasePropertyName",
      "category":"CodeStyle",
      "title":"Enforce CamelCase in properties",
      "description":"Requires all property names to use the CamelCase style",
      "level":"Info"
    },
    {
      "patternId":"rulesets-controversial.xml-CamelCaseMethodName",
      "category":"CodeStyle",
      "title":"Enforce CamelCase in methods",
      "description":"Requires all method names to use the CamelCase style",
      "level":"Info"
    },
    {
      "patternId":"rulesets-controversial.xml-CamelCaseParameterName",
      "category":"CodeStyle",
      "title":"Enforce CamelCase in parameters",
      "description":"Requires all parameter names to use the CamelCase style",
      "level":"Info"
    },
    {
      "patternId":"rulesets-controversial.xml-CamelCaseVariableName",
      "category":"CodeStyle",
      "title":"Enforce CamelCase in variables",
      "description":"Requires all variable names to use the CamelCase style",
      "level":"Warning"
    },
    {
      "patternId":"rulesets-design.xml-ExitExpression",
      "category":"ErrorProne",
      "title":"Prohibit exit-expression",
      "description":"Prohibit the use of exit-expressions within regular code, it is not testable",
      "level":"Warning"
    },
    {
      "patternId":"rulesets-design.xml-EvalExpression",
      "category":"Security",
      "title":"Prohibit eval expression",
      "description":"Prohibit the use of eval, it is untestable, a security risk and bad practice",
      "level":"Warning"
    },
    {
      "patternId":"rulesets-design.xml-GotoStatement",
      "category":"ErrorProne",
      "title":"Prohibit goto",
      "description":"Prohibit the use of goto, it makes the code harder to read nearly impossible to understand",
      "level":"Warning"
    },
    {
      "patternId":"rulesets-design.xml-NumberOfChildren",
      "category":"Complexity",
      "title":"Excessive class children number",
      "description":"Avoid classes with too many children",
      "parameters":[
        {
          "name":"minimum",
          "default":15
        }
      ],
      "level":"Warning"
    },
    {
      "patternId":"rulesets-design.xml-DepthOfInheritance",
      "category":"Complexity",
      "title":"Excessive class parents",
      "description":"Avoid classes with too many parents parents",
      "parameters":[
        {
          "name":"minimum",
          "default":6
        }
      ],
      "level":"Warning"
    },
    {
      "patternId":"rulesets-design.xml-CouplingBetweenObjects",
      "category":"Complexity",
      "title":"Excessive class dependencies",
      "description":"Avoid classes with too many dependencies",
      "parameters":[
        {
          "name":"minimum",
          "default":13
        }
      ],
      "level":"Warning"
    },
    {
      "patternId":"rulesets-unusedcode.xml-UnusedPrivateField",
      "category":"UnusedCode",
      "title":"Prohibit unused private variables",
      "description":"Prohibit the definition or assignment of unused private variables",
      "level":"Warning"
    },
    {
      "patternId":"rulesets-unusedcode.xml-UnusedLocalVariable",
      "category":"UnusedCode",
      "title":"Prohibit unused variables",
      "description":"Prohibit the definition or assignment of unused local variables",
      "level":"Warning"
    },
    {
      "patternId":"rulesets-unusedcode.xml-UnusedPrivateMethod",
      "category":"UnusedCode",
      "title":"Prohibit unused private methods",
      "description":"Prohibit the definition or assignment of unused private methods",
      "level":"Warning"
    },
    {
      "patternId":"rulesets-unusedcode.xml-UnusedFormalParameter",
      "category":"UnusedCode",
      "title":"Prohibit unused arguments",
      "description":"Prohibit the definition of unused parameters on methods or constructors",
      "level":"Warning"
    },
    {
      "patternId":"rulesets-naming.xml-ShortVariable",
      "category":"CodeStyle",
      "title":"Prohibit short variable names",
      "description":"Detects when a field, local, or parameter has a very short name.",
      "parameters":[
        {
          "name":"minimum",
          "default":3
        },
        {
          "name":"exceptions",
          "default":""
        }
      ],
      "level":"Info"
    },
    {
      "patternId":"rulesets-naming.xml-LongVariable",
      "category":"CodeStyle",
      "title":"Prohibit long variable names",
      "description":"Detects when a field, local, or parameter has a very long name.",
      "parameters":[
        {
          "name":"maximum",
          "default":20
        }
      ],
      "level":"Info"
    },
    {
      "patternId":"rulesets-naming.xml-ShortMethodName",
      "category":"CodeStyle",
      "title":"Prohibit short method names",
      "description":"Detects when very short method names are used.",
      "parameters":[
        {
          "name":"minimum",
          "default":3
        },
        {
          "name":"exceptions",
          "default":""
        }
      ],
      "level":"Info"
    },
    {
      "patternId":"rulesets-naming.xml-ConstructorWithNameAsEnclosingClass",
      "category":"CodeStyle",
      "title":"Prohibit constructor with class name",
      "description":"In PHP 5, a constructor should not have the same name as the enclosing class.",
      "level":"Info"
    },
    {
      "patternId":"rulesets-naming.xml-ConstantNamingConventions",
      "category":"CodeStyle",
      "title":"Enforce uppercase constants",
      "description":"Constant names should always be defined in uppercase.",
      "level":"Info"
    },
    {
      "patternId":"rulesets-naming.xml-BooleanGetMethodName",
      "category":"CodeStyle",
      "title":"Enforce boolean naming convention",
      "description":"Boolean methods should be called 'isX()' or 'hasX()'",
      "level":"Info"
    }
  ]
}